name: release all modules

on:
  push:
    branches:
      - release

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        # https://github.com/actions/checkout
        uses: actions/checkout@v3
        with:
          # checkout whole history of release branch
          fetch-depth: 0

      - name: conventional changelog
        id: changelog
        # https://github.com/TriPSs/conventional-changelog-action
        uses: TriPSs/conventional-changelog-action@v3
        with:
          # you can also create separate token to trace action
          github-token: "${{secrets.GITHUB_TOKEN}}"
          # do not create changelog file, the content is used at next step for relase body
          output-file: false
          # do not create additional commit, just tag current commit with the version
          skip-commit: true
          # do not pull - we already checked out the selection we want to use for versioning
          skip-git-pull: true

      - name: auth image (build and push)
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/auth
          echo image_tag $IMAGE_TAG
          IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/auth:${{steps.changelog.outputs.tag}}
          echo image_tag_rsd $IMAGE_TAG_RSD
          docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f authentication/dockerfile ./authentication
          echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
          echo push auth image with all tags
          docker push ghcr.io/research-software-directory/rsd-saas/auth --all-tags

      - name: database image (build and push)
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/database
          echo image_tag $IMAGE_TAG
          IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/database:${{steps.changelog.outputs.tag}}
          echo image_tag_rsd $IMAGE_TAG_RSD
          docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f database/dockerfile ./database
          echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
          echo push database image with all tags
          docker push ghcr.io/research-software-directory/rsd-saas/database --all-tags

      - name: backend image (build and push)
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/backend
          echo image_tag $IMAGE_TAG
          IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/backend:${{steps.changelog.outputs.tag}}
          echo image_tag_rsd $IMAGE_TAG_RSD
          docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f backend-postgrest/dockerfile ./backend-postgrest
          echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
          echo backend image with all tags
          docker push ghcr.io/research-software-directory/rsd-saas/backend --all-tags

      - name: frontend image (build and push)
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/frontend
          echo image_tag $IMAGE_TAG
          IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/frontend:${{steps.changelog.outputs.tag}}
          echo image_tag_rsd $IMAGE_TAG_RSD
          docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f frontend/Dockerfile ./frontend
          echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
          echo push frontend image with all tags
          docker push ghcr.io/research-software-directory/rsd-saas/frontend --all-tags

      - name: nginx image (build and push)
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/nginx
          echo image_tag $IMAGE_TAG
          IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/nginx:${{steps.changelog.outputs.tag}}
          echo image_tag_rsd $IMAGE_TAG_RSD
          docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f nginx/dockerfile ./nginx
          echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
          echo push nginx image with all tags
          docker push ghcr.io/research-software-directory/rsd-saas/nginx --all-tags

      - name: scrapers image (build and push)
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/scrapers
          echo image_tag $IMAGE_TAG
          IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/scrapers:${{steps.changelog.outputs.tag}}
          echo image_tag_rsd $IMAGE_TAG_RSD
          docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f scrapers/dockerfile ./scrapers
          echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
          echo push scrapers image with all tags
          docker push ghcr.io/research-software-directory/rsd-saas/scrapers --all-tags

      - name: update version in docker-compose.yml
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          echo replace :latest tag with ${{steps.changelog.outputs.tag}}
          sed -i -e 's/:latest/:${{steps.changelog.outputs.tag}}/g' ./deployment/docker-compose.yml
          cat ./deployment/docker-compose.yml

      - name: update CITATION.cff with version and release date
        # use doublequotes in second replace "" to enable variable substitution with bash
        run: |
          echo replace version line
          sed -i -e 's/version:.*/version: ${{steps.changelog.outputs.tag}}/' CITATION.cff
          echo replace date
          sed -i -e "s/date-released:.*/date-released: '$(date +%F)'/" CITATION.cff
          cat CITATION.cff

      - name: zip deployment files
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          zip deployment.zip \
            ./deployment/docker-compose.yml \
            ./deployment/.env.example \
            ./deployment/README.md \
            CITATION.cff \
            LICENSE

      - name: create release
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        # https://github.com/softprops/action-gh-release
        uses: softprops/action-gh-release@v1
        env:
          # The token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.changelog.outputs.tag }}
          name: ${{ steps.changelog.outputs.tag }}
          body: ${{steps.changelog.outputs.clean_changelog}}
          draft: true
          prerelease: false
          files: deployment.zip


