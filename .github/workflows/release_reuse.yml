name: build and release (manual)

on:
  workflow_dispatch:

jobs:
  release_tag:
    name: calculate version
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{steps.changelog.outputs.clean_changelog}}
      tag: ${{steps.changelog.outputs.tag}}
      skipped: ${{steps.changelog.outputs.skipped}}
    steps:
      - name: checkout branch with all history
        # https://github.com/actions/checkout
        uses: actions/checkout@v3
        with:
          # checkout whole history of main branch
          ref: main
          fetch-depth: 0

      - name: calculate new version and create changelog content
        id: changelog
        # https://github.com/TriPSs/conventional-changelog-action
        uses: TriPSs/conventional-changelog-action@v3
        with:
          # you can also create separate token to trace action
          github-token: "${{secrets.GITHUB_TOKEN}}"
          # do not create changelog file, the content is used at next step for relase body
          output-file: false
          # do not create additional commit, just tag current commit with the version
          skip-commit: true
          # do not pull - we already checked out the selection we want to use for versioning
          skip-git-pull: true
          # skip tag push - it will not push but it will tag
          git-push: false
  auth:
    if: needs.release_tag.outputs.skipped == false
    needs: release_tag
    name: auth image (build and push)
    uses: ./.github/workflows/reuse_ghcr.yml
    with:
      ghcr_user: ${{github.actor}}
      base_image_name: ghcr.io/research-software-directory/rsd-saas/auth
      image_tag: ${{steps.changelog.outputs.tag}}
      dockerfile: authentication/dockerfile
      docker_context: ./authentication
    secrets:
      token: ${{secrets.GITHUB_TOKEN}}

  database:
    if: needs.release_tag.outputs.skipped == false
    needs: release_tag
    name: database image (build and push)
    uses: ./.github/workflows/reuse_ghcr.yml
    with:
      ghcr_user: ${{github.actor}}
      base_image_name: ghcr.io/research-software-directory/rsd-saas/database
      image_tag: ${{steps.changelog.outputs.tag}}
      dockerfile: database/dockerfile
      docker_context: ./database
    secrets:
      token: ${{secrets.GITHUB_TOKEN}}

      # - name: backend image (build and push)
      #   if: ${{steps.changelog.outputs.skipped == 'false'}}
      #   run: |
      #     IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/backend
      #     echo image_tag $IMAGE_TAG
      #     IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/backend:${{steps.changelog.outputs.tag}}
      #     echo image_tag_rsd $IMAGE_TAG_RSD
      #     docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f backend-postgrest/dockerfile ./backend-postgrest
      #     echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
      #     echo backend image with all tags
      #     docker push ghcr.io/research-software-directory/rsd-saas/backend --all-tags

      # - name: frontend image (build and push)
      #   if: ${{steps.changelog.outputs.skipped == 'false'}}
      #   run: |
      #     IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/frontend
      #     echo image_tag $IMAGE_TAG
      #     IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/frontend:${{steps.changelog.outputs.tag}}
      #     echo image_tag_rsd $IMAGE_TAG_RSD
      #     docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f frontend/Dockerfile ./frontend
      #     echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
      #     echo push frontend image with all tags
      #     docker push ghcr.io/research-software-directory/rsd-saas/frontend --all-tags

      # - name: nginx image (build and push)
      #   if: ${{steps.changelog.outputs.skipped == 'false'}}
      #   run: |
      #     IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/nginx
      #     echo image_tag $IMAGE_TAG
      #     IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/nginx:${{steps.changelog.outputs.tag}}
      #     echo image_tag_rsd $IMAGE_TAG_RSD
      #     docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f nginx/dockerfile ./nginx
      #     echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
      #     echo push nginx image with all tags
      #     docker push ghcr.io/research-software-directory/rsd-saas/nginx --all-tags

      # - name: scrapers image (build and push)
      #   if: ${{steps.changelog.outputs.skipped == 'false'}}
      #   run: |
      #     IMAGE_TAG=ghcr.io/research-software-directory/rsd-saas/scrapers
      #     echo image_tag $IMAGE_TAG
      #     IMAGE_TAG_RSD=ghcr.io/research-software-directory/rsd-saas/scrapers:${{steps.changelog.outputs.tag}}
      #     echo image_tag_rsd $IMAGE_TAG_RSD
      #     docker build -t $IMAGE_TAG_RSD -t $IMAGE_TAG -f scrapers/dockerfile ./scrapers
      #     echo "${{secrets.GITHUB_TOKEN}}" | docker login https://ghcr.io -u ${{github.actor}} --password-stdin
      #     echo push scrapers image with all tags
      #     docker push ghcr.io/research-software-directory/rsd-saas/scrapers --all-tags
  deployment_files:
    name: create deployment.zip
    if: needs.release_tag.outputs.skipped == false
    needs: [release_tag,auth,database]
    runs-on: ubuntu-latest
    steps:
      - name: checkout main branch
        # https://github.com/actions/checkout
        uses: actions/checkout@v3
        with:
          # checkout whole history of main branch
          ref: main

      - name: update docker-compose.yml
        run: |
          echo replace :latest tag with ${{needs.release_tag.outputs.tag}}
          sed -i -e 's/:latest/:${{needs.release_tag.outputs.tag}}/g' ./deployment/docker-compose.yml
          cat ./deployment/docker-compose.yml

      - name: update CITATION.cff
        # use doublequotes in second replace "" to enable variable substitution with bash
        run: |
          echo replace version line
          sed -i -e 's/^version:.*/version: ${{needs.release_tag.outputs.tag}}/' CITATION.cff
          echo replace date
          sed -i -e "s/^date-released:.*/date-released: '$(date +%F)'/" CITATION.cff
          cat CITATION.cff

      - name: zip deployment files
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        run: |
          zip deployment.zip \
            ./deployment/docker-compose.yml \
            ./deployment/.env.example \
            ./deployment/README.md \
            CITATION.cff \
            LICENSE

      - name: Upload deployment.zip
        # https://github.com/actions/upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment
          path: deployment.zip

      - name: commit CITATION.cff
        # https://github.com/stefanzweifel/git-auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "release: update citation file"
          file_pattern: CITATION.cff

  draft_release:
    if: needs.release_tag.outputs.skipped == false
    needs: [release_tag, deployment_files]
    name: create release
    runs-on: ubuntu-latest
    steps:
      - name: get deployment.zip
        uses: actions/download-artifact@v3
        with:
          name: deployment

      - name: validate all info
        run: |
          echo show files
          ls -lha
          echo tag_name=${{needs.release_tag.outputs.tag}}
          echo changelog
          echo ${{needs.release_tag.outputs.changelog}}

      - name: create release draft
        if: ${{steps.changelog.outputs.skipped == 'false'}}
        # https://github.com/softprops/action-gh-release
        uses: softprops/action-gh-release@v1
        env:
          # The token is provided by Actions, you do not need to create your own token
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.release_tag.outputs.tag }}
          name: ${{ steps.changelog.outputs.tag }}
          body: ${{steps.changelog.outputs.clean_changelog}}
          draft: true
          prerelease: false
          files: deployment.zip
